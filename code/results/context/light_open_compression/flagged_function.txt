light_file light_open_compression(const char *file_name, const __read_mode_t mode, int compression_level)
{
	light_file fd = calloc(1, sizeof(light_file_t));
	fd->file = INVALID_FILE;

	assert(0 <= compression_level && 10 >= compression_level);
	compression_level = max(0, compression_level);
	compression_level = min(compression_level, 10);

	fd->compression_context = light_get_compression_context(compression_level);

	switch (mode)
	{
		case LIGHT_OWRITE:
			fd->file = fopen(file_name, "wb");
			break;
			//TODO Not so sure about allowing appends... I think you can get away with this in Zstd 
			//but i dont know about other compression algorithms!
		/*case LIGHT_OAPPEND:
			fd->file = fopen(file_name, "ab");
			break;*/
		default:
			break;
	}

	if (fd->file)
	{
		return fd;
	}
	else
	{
		return NULL;
	}
}