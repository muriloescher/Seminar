light_pcapng_t *light_pcapng_open_read(const char* file_path, light_boolean read_all_interfaces)
{
	DCHECK_NULLP(file_path, return NULL);

	light_pcapng_t *pcapng = calloc(1, sizeof(struct _light_pcapng_t));
	pcapng->file = light_open(file_path, LIGHT_OREAD);
	DCHECK_ASSERT_EXP(pcapng->file != NULL, "could not open file", return NULL);
	
	//The first thing inside an NG capture is the section header block
	//When the file is opened we need to go ahead and read that out
	light_read_record(pcapng->file,&pcapng->pcapng);
	//Prase stuff out of the section header
	pcapng->file_info = __create_file_info(pcapng->pcapng);

	//If they requested to read all interfaces we must fast forward through file and find them all up front
	if (read_all_interfaces)
	{
		//Bookmark our current location
		light_file_pos_t currentPos = light_get_pos(pcapng->file);
		while (pcapng->pcapng != NULL)
		{
			light_read_record(pcapng->file, &pcapng->pcapng);
			uint32_t type = LIGHT_UNKNOWN_DATA_BLOCK;
			light_get_block_info(pcapng->pcapng, LIGHT_INFO_TYPE, &type, NULL);
			if (type == LIGHT_INTERFACE_BLOCK)
				__append_interface_block_to_file_info(pcapng->pcapng, pcapng->file_info);
		}
		//Should be at and of file now, if not something broke!!!
		if (!light_eof(pcapng->file))
		{
			light_pcapng_release(pcapng->pcapng);
			return NULL;
		}
		//Ok got to end of file so reset back to bookmark
		light_set_pos(pcapng->file, currentPos);
	}

	light_pcapng_release(pcapng->pcapng);
	pcapng->pcapng = NULL;
	
	return pcapng;
}