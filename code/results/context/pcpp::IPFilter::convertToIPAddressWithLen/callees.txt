std::string toString() const { return std::string(m_AddressAsString); }

bool isSupressErrors() const { return m_SuppressErrors; }

bool isErrorStringSet() const { return m_ErrorString != NULL; }

char* getErrorString() const { return m_ErrorString; }

int getErrorStringLength() const { return m_ErrorStringLen; }

uint32_t IPv4Address::toInt() const
{
	uint32_t result;
	memcpy(&result, m_pInAddr, sizeof(uint32_t));
	return result;
}

void IPv6Address::copyTo(uint8_t** arr, size_t& length) const
{
	const size_t addrLen = sizeof(in6_addr);
	length = addrLen;
	(*arr) = new uint8_t[addrLen];
	memcpy((*arr), m_pInAddr, addrLen);
}

void IPv6Address::copyTo(uint8_t* arr) const
{
	memcpy(arr, m_pInAddr, sizeof(in6_addr));
}

IPAddress::Ptr_t IPAddress::fromString(char* addressAsString)
{
	in_addr ip4Addr;
	in6_addr ip6Addr;
	if (inet_pton(AF_INET, addressAsString, &ip4Addr) != 0)
	{
		return IPAddress::Ptr_t(new IPv4Address(addressAsString));
	}
	else if (inet_pton(AF_INET6, addressAsString, &ip6Addr) != 0)
	{
		return IPAddress::Ptr_t(new IPv6Address(addressAsString));
	}

	return IPAddress::Ptr_t();
}

IPAddress::Ptr_t IPAddress::fromString(std::string addressAsString)
{
	return fromString((char*)addressAsString.c_str());
}

IPv4Address::IPv4Address(const IPv4Address& other)
{
	m_pInAddr = new in_addr();
	memcpy(m_pInAddr, other.m_pInAddr, sizeof(in_addr));

	strncpy(m_AddressAsString, other.m_AddressAsString, MAX_ADDR_STRING_LEN);
	m_IsValid = other.m_IsValid;
}

IPv4Address::IPv4Address(uint32_t addressAsInt)
{
	m_pInAddr = new in_addr();
	memcpy(m_pInAddr, &addressAsInt, sizeof(addressAsInt));
	if (inet_ntop(AF_INET, m_pInAddr, m_AddressAsString, MAX_ADDR_STRING_LEN) == 0)
		m_IsValid = false;
	else
		m_IsValid = true;
}

IPv4Address::IPv4Address(uint8_t oct1, uint8_t oct2, uint8_t oct3, uint8_t oct4)
{
	m_pInAddr = new in_addr();
	uint8_t octArr[4] = { oct1, oct2, oct3, oct4 };
	memcpy(m_pInAddr, octArr, 4*sizeof(uint8_t));
	if (inet_ntop(AF_INET, m_pInAddr, m_AddressAsString, MAX_ADDR_STRING_LEN) == 0)
		m_IsValid = false;
	else
		m_IsValid = true;
}

IPv4Address::IPv4Address(in_addr* inAddr)
{
	m_pInAddr = new in_addr();
	memcpy(m_pInAddr, inAddr, sizeof(in_addr));
	if (inet_ntop(AF_INET, m_pInAddr, m_AddressAsString, MAX_ADDR_STRING_LEN) == 0)
		m_IsValid = false;
	else
		m_IsValid = true;
}

IPv6Address::IPv6Address(uint8_t* addressAsUintArr)
{
	m_pInAddr = (in6_addr*)new uint8_t[sizeof(in6_addr)];
	memcpy(m_pInAddr, addressAsUintArr, sizeof(in6_addr));
	if (inet_ntop(AF_INET6, m_pInAddr, m_AddressAsString, MAX_ADDR_STRING_LEN) == 0)
		m_IsValid = false;
	else
		m_IsValid = true;
}

IPv6Address::IPv6Address(char* addressAsString)
{
	init(addressAsString);
}

IPv6Address::IPv6Address(std::string addressAsString)
{
	init((char*)addressAsString.c_str());
}